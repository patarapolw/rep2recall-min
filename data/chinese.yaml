model:
  - id: ed93dc6f-3103-4ef2-a0b9-16b0b36720c6
    name: Chinese vocab
    back: |
      <% if (it.simplified) { %>
        <p>Simplified: <span class="clickable" onclick="speak(innerText)"> <%= it.simplified %> </span></p>
      <% } else { %>
        <p>Chinese: <span class="clickable" onclick="speak(innerText)"> <%= it.chinese %> </span></p>
      <% } %>
      <% if (it.traditional && it.traditional.length) { %><p>Traditional: <%= it.traditional.join(' | ') %></p><% } %>
      <p>Reading: <%= it.pinyin.join(' / ') %></p>
      <% if (it.english && it.english.length) { %><p>English: 
        <ul>
          <% it.english.map(r => { %>
            <li> <%= r %> </li>
          <% }) %>
        </ul>
      </p></p><% } %>
      <% if (it.sentences && it.sentences.length) { %><p>Sentences: 
        <ul>
          <% it.sentences.map(r => { %>
            <li> <span class="clickable" onclick="speak(innerText)"> <%= r.cmn %> </span>
              <ul>
                <li> <%= r.eng %> </li>
              </ul>
            </li>
          <% }) %>
        </ul>
      </p></p><% } %>
    shared: |
      <style>
      * {
        font-weight: normal;
        font-family: 'Noto Sans CJK SC';
      }

      .clickable {
        cursor: pointer;
      }
      .clickable:hover {
        color: blue;
      }
      </style>

      <script>
      (() => {
        const allVoices = {}
        
        window.speak = async (s, forceOffline) => {
          if (!forceOffline && navigator.onLine) {
            const audio = new Audio(
              `/proxy/gtts/generate?lang=zh-CN&q=${encodeURIComponent(s)}&secret=${encodeURIComponent(
                new URL(location.href).searchParams.get('secret') || ''
              )}`
            )
            await audio.play().catch(() => speak(s, true))
            return
          }

          if (Object.keys(allVoices).length === 0) {
            // eslint-disable-next-line array-callback-return
            window.speechSynthesis.getVoices().map((v) => {
              allVoices[v.lang] = v.lang
            })

            window.speechSynthesis.onvoiceschanged = () => {
              // eslint-disable-next-line array-callback-return
              window.speechSynthesis.getVoices().map((v) => {
                allVoices[v.lang] = v.lang
              })
            }
          }

          const voices = Object.keys(allVoices)
          const stage1 = () => voices.filter((v) => v === 'zh' || v === 'cmn')[0]
          const stage2 = () => {
            return voices.filter((v) => /^zh[-_]?/i.test(v))[0]
          }

          const lang = stage1() || stage2() || ''

          if (lang) {
            const utterance = new window.SpeechSynthesisUtterance(s)
            utterance.lang = lang
            window.speechSynthesis.speak(utterance)

            return new Promise((resolve) => {
              utterance.onend = () => {
                resolve()
              }
            })
          }
        }
      })()
      </script>
    generator:
      _: |
        <%
          if (!it.pinyin) {
            const r = await fetch(`/proxy/zh/vocab/match?q=${encodeURIComponent(it.chinese)}`)
            if (r.ok) {
              const { result } = await r.json()
              if (result[0]) {
                it.simplified = result[0].simplified
                it.traditional = result[0].traditional
                it.pinyin = result[0].reading
                it.english = result[0].english
              }
            }
          }

          if (!it.pinyin) {
            it.pinyin = [toPinyin(it.chinese)]
          }

          if (!it.sentences || !it.sentences.length) {
            const r = await fetch(`/proxy/zh/sentence/q?q=${encodeURIComponent(it.chinese)}`)
            if (r.ok) {
              const { result } = await r.json()
              it.sentences = result
            }
          }
        %>
template:
  - id: 334b35a1-1720-4a6b-aa83-77b203dd276c
    name: Simplified-English
    modelId: ed93dc6f-3103-4ef2-a0b9-16b0b36720c6
    front: |
      <h1><%= it.simplified || it.chinese %></h1>
  - id: 6d4342b5-5c4a-439f-8104-7fcc2fb6b64f
    name: English-Chinese
    modelId: ed93dc6f-3103-4ef2-a0b9-16b0b36720c6
    if: <%= it.english && it.english.length %>
    front: |
      <ul>
        <% it.english.map(r => { %>
          <li> <%= r %> </li>
        <% }) %>
      </ul>